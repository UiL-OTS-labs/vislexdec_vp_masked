/******************************************************************************\
FILE:           test_page.zm
AUTHOR:         Theo Veenker <theo.veenker@beexy.nl>
ADAPTED BY:     -

DESCRIPTION:

Provides a page object to show to the participant during test trials.
It handles presenting the stimulus and recording the participant's response.


HISTORY:
2011-10-25 TV   Created.
2017-01-09 TV   Adapted for Zep 2.0.

\******************************************************************************/


// Symbolic definition of possible responses.
enum TestEvent {
    RESPONSE_NO         = 0,
    RESPONSE_YES        = 1,
}


Page test_page
{
    TestItem    item;           // trial control parameters
    //string      mask_text;      // new, it needs to be created
    //int         primelength;   // length

    init()
    {
        fill_pattern_color = TEST_PAGE_COLOR;
    }


    on_event:message()
    {
        // Process response box message. See setup() below.
        response.process_hit(message_arg, event_time);
    }


    VerticalLayout layout
    {
        init()
        {
            spacing = 50;
            height = 0;     // 0 means as large as possible
        }


        CanvasGadget canvas
        {
            init()
            {
                fill_pattern_color = TEST_PAGE_STIMULUS_COLOR;
                size = 450, 100;
                offset_x = width / 2;
                offset_y = height / 2;
            }


            CrossShape fixation
            {
                init()
                {
                    radius = 15;
                    line_width = 5;
                    line_pattern_color = color:crimson;
                }
            }

            TextShape pre_prime_mask
            {
                init()
                {
                    font_family = TEST_PAGE_STIMULUS_FONT_FAMILY;
                    font_size = TEST_PAGE_STIMULUS_FONT_SIZE;
                    line_pattern_color = TEST_PAGE_STIMULUS_TEXT_COLOR;
                    hor_alignment = ALIGN_CENTER;
                    ver_alignment = ALIGN_CENTER;
                }
            }

            TextShape prime
            {
                init()
                {
                    font_family = TEST_PAGE_STIMULUS_FONT_FAMILY;
                    font_size = TEST_PAGE_STIMULUS_FONT_SIZE;
                    line_pattern_color = TEST_PAGE_STIMULUS_TEXT_COLOR;
                    hor_alignment = ALIGN_CENTER;
                    ver_alignment = ALIGN_CENTER;
                }
            }

            TextShape post_prime_mask
            {
                init()
                {
                    font_family = TEST_PAGE_STIMULUS_FONT_FAMILY;
                    font_size = TEST_PAGE_STIMULUS_FONT_SIZE;
                    line_pattern_color = TEST_PAGE_STIMULUS_TEXT_COLOR;
                    hor_alignment = ALIGN_CENTER;
                    ver_alignment = ALIGN_CENTER;
                }
            }

            TextShape stimulus
            {
                init()
                {
                    font_family = TEST_PAGE_STIMULUS_FONT_FAMILY;
                    font_size = TEST_PAGE_STIMULUS_FONT_SIZE;
                    line_pattern_color = TEST_PAGE_STIMULUS_TEXT_COLOR;
                    hor_alignment = ALIGN_CENTER;
                    ver_alignment = ALIGN_CENTER;
                }
            }
        }



        HorizontalLayout buttons
        {
            init()
            {
                spacing = 50;
                options = LAYOUT_EQUAL_WIDTH;
            }


            ButtonGadget button1
            {
                init()
                {
                    text = NO_BUTTON_TEXT;
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 150, 75;
                }


                on_event:activate()
                {
                    response.process_hit(RESPONSE_NO, event_time);
                }
            }


            ButtonGadget button2
            {
                init()
                {
                    text = YES_BUTTON_TEXT;
                    font_family = TEST_PAGE_BUTTON_FONT_FAMILY;
                    font_size = TEST_PAGE_BUTTON_FONT_SIZE;
                    fill_pattern_color = TEST_PAGE_BUTTON_COLOR;
                    text_color = TEST_PAGE_BUTTON_TEXT_COLOR;
                    size = 150, 75;
                }


                on_event:activate()
                {
                    response.process_hit(RESPONSE_YES, event_time);
                }
            }
        }

        
        time start_stimulus(time t)
        {

            canvas.stimulus.text = item.word;
            // Start target stimulus at prime offset + prime-target ISI.
            // Note, the actual interval between prime offset and target
            // onset will be a multiple of the actual screen refresh interval.
            canvas.stimulus.start(t + PRIME2TARGET_INTERVAL, STIMULUS_DURATION);
            // Return target stimulus onset time.
            return canvas.stimulus.expected_start_time;
        }

        time present_pre_prime_mask(time t, duration dur, string pre_pm)
        {
            canvas.pre_prime_mask.text = pre_pm;
            //place it
            canvas.pre_prime_mask.start(t, dur);
            return pre_prime_mask.expected_finish_time;
        }

        time present_fixcross(time t, duration dur)
        {
            canvas.fixation.start(t, dur)
            return canvas.fixation.expected_finish_time;
        }

        time present_post_prime_mask(time t,
                                     duration dur,
                                     string post_pm)
        {
            canvas.post_prime_mask.text = post_ppm;
            //place it
            canvas.post_prime_mask.start(t, dur);
            return post_prime_mask.expected_finish_time;

        }

        time present_prime(time t)
        {
            canvas.prime.text = item.prime;
            canvas.prime.start(t, PRIME_DURATION)
            return canvas.prime.expected_finish_time;
        }
            
        void reset()
        {
            full_abort();

            canvas.stimulus.is_visible = false;
            canvas.fixation.is_visible = false;
            canvas.pre_prime_mask.is_visible = false;
            canvas.pre_prime_mask.is_visible = false;
            canvas.prime.is_visible = false;
            canvas.post_prime_mask.is_visible = false;
        }
    }



    Response response
    {
        // Response data.
        int     value;          // response value: 0=no, 1=yes, -1=timeout
        int     rt;             // response time [ms]
        int     correct;        // correct response: 0=no, 1=yes, -1=n.a.


        void clear()
        {
            value = -1;
            rt = -9999;
            correct = -1;
        }


        void process_hit(int val, time t)
        {
            HitType validity = hit(t);

            // Accept the first hit in the response interval and end the
            // response interval.
            if (validity == HIT_VALID)
            {
                value = val;
                rt = int(reaction_time(0));
                correct =
                    (item.type != NON_WORD && val == RESPONSE_YES) ||
                    (item.type == NON_WORD && val == RESPONSE_NO);

                ignore_remaining_hits();

                stop();
            }
            else if (validity == HIT_TOO_EARLY || validity == HIT_TOO_LATE)
            {
                // False alarm. Deal with this if desired.
            }
        }


        on_event:finish()
        {
            real correctness = 0;
            if (num_valid_hits > 0) correctness = correct ? 1 : -1;

            if (!test_page_overlay.start_feedback(this, correctness,
                    FEEDBACK_DURATION))
                done(CONTINUE);
        }


        on_event:message()
        {
            done(CONTINUE);
        }
    }


    // Aborts any ongoing activity on this page and signals the initiator
    // of the trial that we're done.
    void done(int msgid)
    {
        // Just in case; abort presentation if still active.
        layout.reset();

        signal_target(msgid);   // tell caller we're done
        target = null;        
        control.clear_status();
    }


    //==========================================================================


    // Performs preparatory work required before using this page.
    void setup(int ntrials=-1, bool fb=false, bool pr=false)
    {
        test_page_overlay.setup(this);

        // Show or hide prompt.
        test_page_overlay.show_prompt(pr ?
            "are both words real words?" : "");

        // Enable or disable the progress bar.
        test_page_overlay.show_progress_bar(ntrials);   // disabled if < 0

        // Enable or disable feedback.
        test_page_overlay.enable_feedback(fb);          // disabled if false


        // Enable response box buttons and fallback keyboard keys.
        control.target = this;
        control.disable_buttons();
        control.disable_keys();
        control.enable_button(BUTTON_0, RESPONSE_NO);
        control.enable_button(BUTTON_1, RESPONSE_YES);
        control.enable_key(KEY_Shift_L, RESPONSE_NO);
        control.enable_key(KEY_Shift_R, RESPONSE_YES);
    }


    // Performs cleaning up if necessary.
    void cleanup()
    {
        test_page_overlay.cleanup();

        control.disable_buttons();
        control.disable_keys();
        control.target = null;
    }


    // Starts a trial.
    void action(Object caller, TestItem it, time tref, int count=-1)
    {
        // Save the passed trial control parameters.
        item = it;
        //mask = test_page.make_mask();


        // Show this page (if not yet done) and make tref the trial start time.
        tref = test_window1.show_test_page(this, tref + INTERTRIAL_INTERVAL);


        // Reset response data.
        response.clear();


        // Start fixation symbol...
        time fix_offset = layout.present_fixcross(tref);
        // ... pre prime mask...
        time pre_offset = layout.present_pre_prime_mask(fix_offset, 
                                    PRE_PRIME_MASK_DURATION,
                                    PRE_PRIME_MASK_TEXT);
        //... prime...
        time prime_offset = layout.present_prime(pre_offset);
        //...post...
        time post_offset = layout.present_post_prime_mask(prime_offset,
                                    POST_PRIME_MASK_DURATION,
                                    POST_PRIME_MASK_TEXT);
        // ... stimulus...
        time stimonset = layout.start_stimulus(post_offset);


        // Response interval starts at stimulus onset. Timeout after
        // RESPONSE_DURATION unless this duration is 0s or less.
        response.start(stimonset, RESPONSE_DURATION);


        // Update progress counter (if enabled).
        test_page_overlay.update_progress_bar(count);


        // Update status line on control window. Cleared in done() above.
        control.set_status(
            string(item.id) + "  " +
            string(item.type) + "  " +
            string(item.prime) + "  " +
            string(item.word)
            );


        // Remember who to signal when the trial is over.
        target = caller;
    }
}
